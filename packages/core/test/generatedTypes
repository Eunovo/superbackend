/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLQuery {
  _empty?: string;
}

export interface GQLMutation {
  _empty?: string;
}

/**
 * @model
 * @rest('/users')
 * @allow('*', '*', 'read')
 * @allow('admin', '*', 'read', 'update')
 */
export interface GQLUser {
  
  /**
   * @unique
   * @allow('user', 'owner', 'update')
   */
  username: string;
  
  /**
   * @default('user')
   */
  role: GQLRole;
  
  /**
   * @deny('user', '*', 'read')
   */
  blocked?: Array<string | null>;
}

export enum GQLRole {
  user = 'user',
  
  /**
   * @extends('user')
   */
  admin = 'admin'
}

/**
 * @model
 * @rest('/tests')
 */
export interface GQLTest {
  
  /**
   * @OneToOne('User', '_id')
   */
  user: GQLUser;
}

/**
 * @model
 * @rest('/stores)
 */
export interface GQLStore {
  
  /**
   * @ManyToOne('User', 'username')
   */
  owner: string;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver;
  Mutation?: GQLMutationTypeResolver;
  User?: GQLUserTypeResolver;
  Test?: GQLTestTypeResolver;
  Store?: GQLStoreTypeResolver;
}
export interface GQLQueryTypeResolver<TParent = any> {
  _empty?: QueryTo_emptyResolver<TParent>;
}

export interface QueryTo_emptyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMutationTypeResolver<TParent = any> {
  _empty?: MutationTo_emptyResolver<TParent>;
}

export interface MutationTo_emptyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserTypeResolver<TParent = any> {
  username?: UserToUsernameResolver<TParent>;
  role?: UserToRoleResolver<TParent>;
  blocked?: UserToBlockedResolver<TParent>;
}

export interface UserToUsernameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToRoleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToBlockedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTestTypeResolver<TParent = any> {
  user?: TestToUserResolver<TParent>;
}

export interface TestToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLStoreTypeResolver<TParent = any> {
  owner?: StoreToOwnerResolver<TParent>;
}

export interface StoreToOwnerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
